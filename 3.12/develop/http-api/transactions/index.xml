<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTTP interfaces for transactions on ArangoDB Documentation</title><link>http://localhost/3.12/develop/http-api/transactions/</link><description>Recent content in HTTP interfaces for transactions on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.12/develop/http-api/transactions/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP interface for Stream Transactions</title><link>http://localhost/3.12/develop/http-api/transactions/stream-transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/develop/http-api/transactions/stream-transactions/</guid><description>For an introduction to this transaction type, see Stream Transactions.
To use a Stream Transaction, a client first sends the configuration of the transaction to the ArangoDB server.
Contrary to JavaScript Transactions, the definition of Stream Transaction must only contain the collections that are going to be used and (optionally) the various transaction options supported by ArangoDB. No action attribute is supported. The Stream Transaction API works in conjunction with other APIs in ArangoDB.</description></item><item><title>HTTP interface for JavaScript Transactions</title><link>http://localhost/3.12/develop/http-api/transactions/javascript-transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/develop/http-api/transactions/javascript-transactions/</guid><description>Deprecated in: v3.12.0
JavaScript Transactions are executed on the server. Transactions can be initiated by clients by sending the transaction description for execution to the server.
JavaScript Transactions in ArangoDB do not offer separate BEGIN, COMMIT and ROLLBACK operations. Instead, JavaScript Transactions are described by a JavaScript function, and the code inside the JavaScript function is then be executed transactionally.
At the end of the function, the transaction is automatically committed, and all changes done by the transaction are persisted.</description></item></channel></rss>