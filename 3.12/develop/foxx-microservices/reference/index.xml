<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Foxx reference on ArangoDB Documentation</title><link>http://localhost/3.12/develop/foxx-microservices/reference/</link><description>Recent content in Foxx reference on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.12/develop/foxx-microservices/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Service manifest</title><link>http://localhost/3.12/develop/foxx-microservices/reference/service-manifest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/develop/foxx-microservices/reference/service-manifest/</guid><description>Every service comes with a manifest.json file providing metadata. Typically, a manifest should at least specify the version of ArangoDB the service supports and the main JavaScript file which Foxx uses as the entrypoint to your service:
{ &amp;#34;engines&amp;#34;: { &amp;#34;arangodb&amp;#34;: &amp;#34;^3.4.0&amp;#34; }, &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34; } Tooling integration If you are using an IDE or editor that supports JSON schema for code intelligence or validation, you can use the public Foxx manifest schema available at the third-party JSON Schema Store&amp;nbsp; by adding a $schema field to your manifest.</description></item><item><title>Foxx service context</title><link>http://localhost/3.12/develop/foxx-microservices/reference/service-context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/develop/foxx-microservices/reference/service-context/</guid><description>The service context provides access to methods and attributes that are specific to a given service. In a Foxx service the context is generally available as the module.context variable. Within a router&amp;rsquo;s request handler the request and response objects&amp;rsquo; context attribute also provide access to the context of the service the route was mounted in (which may be different from the one the route handler was defined in).
Examples
// in service /my-foxx-1 const createRouter = require(&amp;#39;@arangodb/foxx/router&amp;#39;); const router = createRouter(); // See the chapter on dependencies for more info on // how exports and dependencies work across services module.</description></item><item><title>Foxx configuration</title><link>http://localhost/3.12/develop/foxx-microservices/reference/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/develop/foxx-microservices/reference/configuration/</guid><description>Foxx services can define configuration parameters in the service manifest to make them more re-usable.
The configuration object maps names to configuration parameters:
The key is the name under which the parameter will be available on the service context&amp;rsquo;s configuration property.
The value is a parameter definition.
The key should be a valid identifier following the case-insensitive format /^[_$a-z][-_$a-z0-9]*$/.
The parameter definition can have the following properties:
description: string
Human readable description of the parameter.</description></item><item><title>Foxx Routers</title><link>http://localhost/3.12/develop/foxx-microservices/reference/routers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/develop/foxx-microservices/reference/routers/</guid><description>const createRouter = require('@arangodb/foxx/router');
Routers let you define routes that extend ArangoDB&amp;rsquo;s HTTP API with custom endpoints.
Routers need to be mounted using the use method of a service context to expose their HTTP routes at a service&amp;rsquo;s mount path.
You can pass routers between services mounted in the same database as dependencies. You can even nest routers within each other.
Creating a router createRouter(): Router
This returns a new, clean router object that has not yet been mounted in the service and can be exported like any other object.</description></item><item><title>Foxx Session Middleware</title><link>http://localhost/3.12/develop/foxx-microservices/reference/sessions-middleware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/develop/foxx-microservices/reference/sessions-middleware/</guid><description>const sessionMiddleware = require('@arangodb/foxx/sessions');
The session middleware adds the session and sessionStorage properties to the request object and deals with serializing and deserializing the session as well as extracting session identifiers from incoming requests and injecting them into outgoing responses.
Examples
// Create a session middleware const sessions = sessionsMiddleware({ storage: module.context.collection(&amp;#39;sessions&amp;#39;), transport: [&amp;#39;header&amp;#39;, &amp;#39;cookie&amp;#39;] }); // First enable the middleware for this service module.context.use(sessions); // Now mount the routers that use the session const router = createRouter(); module.</description></item><item><title>Related modules for Foxx</title><link>http://localhost/3.12/develop/foxx-microservices/reference/related-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/develop/foxx-microservices/reference/related-modules/</guid><description>These are some of the modules outside of Foxx you will find useful when writing Foxx services.
Additionally there are modules providing some level of compatibility with Node.js as well as a number of bundled NPM modules (like lodash and joi). For more information on these modules, see the JavaScript API.
The @arangodb module require('@arangodb')
This module provides access to various ArangoDB internals as well as three of the most important exports necessary to work with the database in Foxx: db, aql and errors.</description></item></channel></rss>