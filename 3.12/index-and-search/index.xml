<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Index and Search on ArangoDB Documentation</title><link>http://localhost/3.12/index-and-search/</link><description>Recent content in Index and Search on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.12/index-and-search/index.xml" rel="self" type="application/rss+xml"/><item><title>About indexing and indexes</title><link>http://localhost/3.12/index-and-search/indexing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/index-and-search/indexing/</guid><description/></item><item><title>Information Retrieval with ArangoSearch</title><link>http://localhost/3.12/index-and-search/arangosearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/index-and-search/arangosearch/</guid><description>ArangoSearch provides information retrieval features, natively integrated into ArangoDB&amp;rsquo;s query language and with support for all data models. It is primarily a full-text search engine, a much more powerful alternative to the full-text index type. It can index nested fields from multiple collections, optionally with transformations such as text normalization and tokenization applied, rank query results by relevance and more.
Example Use Cases Perform federated full-text searches over product descriptions for a web shop, with the product documents stored in various collections.</description></item><item><title>Transforming data with Analyzers</title><link>http://localhost/3.12/index-and-search/analyzers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.12/index-and-search/analyzers/</guid><description>While AQL string functions allow for basic text manipulation, true text processing including tokenization, language-specific word stemming, case conversion and removal of diacritical marks (accents) from characters only become possible with Analyzers.
Analyzers parse input values and transform them into sets of sub-values, for example by breaking up text into words. If they are used in Views then the documents&amp;rsquo; attribute values of the linked collections are used as input and additional metadata is produced internally.</description></item></channel></rss>