<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTTP API Documentation on ArangoDB Documentation</title><link>http://localhost/3.10/develop/http-api/</link><description>Recent content in HTTP API Documentation on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.10/develop/http-api/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP request handling in ArangoDB</title><link>http://localhost/3.10/develop/http-api/general-request-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/general-request-handling/</guid><description>Protocol ArangoDB exposes its API via HTTP, making the server accessible easily with a variety of clients and tools (e.g. browsers, curl, telnet). The communication can optionally be SSL-encrypted.
Additionally, there is a custom binary protocol called VelocyStream&amp;nbsp; which can be used for better throughput. HTTP requests are easily mappable to VelocyStream and no separate documentation exists as the API is essentially the same for both network protocols.
ArangoDB uses the standard HTTP methods (e.</description></item><item><title>Authentication</title><link>http://localhost/3.10/develop/http-api/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/authentication/</guid><description>Client authentication can be achieved by using the Authorization HTTP header in client requests. ArangoDB supports authentication via HTTP Basic or JWT.
Authentication is turned on by default for all internal database APIs but turned off for custom Foxx apps. To toggle authentication for incoming requests to the internal database APIs, use the --server.authentication startup option. This option is turned on by default so authentication is required for the database APIs.</description></item><item><title>HTTP interface for user management</title><link>http://localhost/3.10/develop/http-api/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/users/</guid><description>The interface provides the means to manage database system users. All users managed through this interface are stored in the protected _users system collection.
You should never manipulate the _users collection directly. The specialized endpoints intentionally have limited functionality compared to the regular Document API.
See Managing Users for details and note that using wildcard database and collection access levels is discouraged.
User management operations are not included in ArangoDB&amp;rsquo;s replication.</description></item><item><title>HTTP interface for databases</title><link>http://localhost/3.10/develop/http-api/databases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/databases/</guid><description>The HTTP interface for databases provides operations to create and drop individual databases. These are mapped to the standard POST and DELETE HTTP methods. There is also the GET method to retrieve an array of existing databases.
All database management operations can only be accessed via the default _system database and none of the other databases. Addresses of databases Any operation triggered via ArangoDB&amp;rsquo;s RESTful HTTP API is executed in the context of exactly one database.</description></item><item><title>HTTP interface for collections</title><link>http://localhost/3.10/develop/http-api/collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/collections/</guid><description>Addresses of collections All collections in ArangoDB have a unique identifier and a unique name. To access a collection, use the collection name to refer to it:
http://server:port/_api/collection/&amp;lt;collection-name&amp;gt; For example, assume that the collection identifier is 7254820 and the collection name is demo, then the URL of that collection is:
http://localhost:8529/_api/collection/demo Get information about collections List all collections GET /_api/collection Returns an object with a result attribute containing an array with the descriptions of all collections in the current database.</description></item><item><title>HTTP interface for documents</title><link>http://localhost/3.10/develop/http-api/documents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/documents/</guid><description>The basic operations for documents are mapped to the standard HTTP methods:
Create: POST Read: GET Update: PATCH (partially modify) Replace: PUT Delete: DELETE Check: HEAD (test for existence and get document metadata) Addresses of documents Any document can be retrieved using its unique URI:
http://server:port/_api/document/&amp;lt;document-identifier&amp;gt; For example, assuming that the document identifier is demo/362549736, then the URL of that document is:
http://localhost:8529/_api/document/demo/362549736 The above URL schema does not specify a database name explicitly, so the default _system database is used.</description></item><item><title>HTTP interfaces for graphs</title><link>http://localhost/3.10/develop/http-api/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/graphs/</guid><description/></item><item><title>HTTP interfaces for queries</title><link>http://localhost/3.10/develop/http-api/queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/queries/</guid><description/></item><item><title>Pregel HTTP API</title><link>http://localhost/3.10/develop/http-api/pregel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/pregel/</guid><description>See Distributed Iterative Graph Processing (Pregel) for details.
Start a Pregel job execution POST /_api/control_pregel To start an execution you need to specify the algorithm name and a named graph (SmartGraph in cluster). Alternatively you can specify the vertex and edge collections. Additionally you can specify custom parameters which vary for each algorithm. Request Body application/json object algorithm* string Name of the algorithm. One of:
&amp;quot;pagerank&amp;quot; - Page Rank &amp;quot;sssp&amp;quot; - Single-Source Shortest Path &amp;quot;connectedcomponents&amp;quot; - Connected Components &amp;quot;wcc&amp;quot; - Weakly Connected Components &amp;quot;scc&amp;quot; - Strongly Connected Components &amp;quot;hits&amp;quot; - Hyperlink-Induced Topic Search &amp;quot;effectivecloseness&amp;quot; - Effective Closeness &amp;quot;linerank&amp;quot; - LineRank &amp;quot;labelpropagation&amp;quot; - Label Propagation &amp;quot;slpa&amp;quot; - Speaker-Listener Label Propagation edgeCollections array of strings List of edge collection names.</description></item><item><title>HTTP interfaces for transactions</title><link>http://localhost/3.10/develop/http-api/transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/transactions/</guid><description>Transactions are executed on the server-side. Clients can run different types of transactions that involve different interfaces:
Via the Stream Transaction API Via the JavaScript Transaction API For a more detailed description of the transaction types, how transactions work in ArangoDB, and what guarantees ArangoDB provide, please refer to Transactions.</description></item><item><title>HTTP interface for indexes</title><link>http://localhost/3.10/develop/http-api/indexes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/indexes/</guid><description>Addresses of indexes All indexes in ArangoDB have a unique identifier. It identifies an index within a collection and is managed by ArangoDB. The full identifier is prefixed with a collection name and a forward slash (/) to identify an index within a database.
http://server:port/_api/index/&amp;lt;collection-name&amp;gt;/&amp;lt;index-identifier&amp;gt; For example, assume that the full index identifier is demo/63563528, then the URL of that index is as follows:
http://localhost:8529/_api/index/demo/63563528 List all indexes of a collection GET /_api/index Returns an object with an indexes attribute containing an array of all index descriptions for the given collection.</description></item><item><title>HTTP interface for Views</title><link>http://localhost/3.10/develop/http-api/views/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/views/</guid><description> Addresses of Views All Views in ArangoDB have a unique identifier and a unique name. To access a View, use the View name to refer to it:
http://server:port/_api/view/&amp;lt;view-name&amp;gt; For example, assume that the View identifier is 7254820 and the View name is demo, then the URL of that View is:
http://localhost:8529/_api/view/demo</description></item><item><title>HTTP interface for Analyzers</title><link>http://localhost/3.10/develop/http-api/analyzers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/analyzers/</guid><description>The RESTful API for managing ArangoSearch Analyzers is accessible via the /_api/analyzer endpoint.
See the description of Analyzers for an introduction and the available types, properties and features.
Create an Analyzer POST /_api/analyzer Creates a new Analyzer based on the provided configuration. Request Body application/json object features array of strings The set of features to set on the Analyzer generated fields. The default value is an empty array.
name* string The Analyzer name.</description></item><item><title>HTTP interface for imports</title><link>http://localhost/3.10/develop/http-api/import/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/import/</guid><description>Import JSON data as documents POST /_api/import Load JSON data and store it as documents into the specified collection.
The request body can have different JSON formats:
One JSON object per line (JSONL) A JSON array of objects One JSON array per line (CSV-like) If you import documents into edge collections, all documents require a _from and a _to attribute.
Path Parameters Query Parameters collection* string The name of the target collection.</description></item><item><title>HTTP interface for Foxx</title><link>http://localhost/3.10/develop/http-api/foxx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/foxx/</guid><description>Introduced in: v3.2.0
For more information on Foxx and its JavaScript APIs see the Foxx documentation.
Management List the installed services GET /_api/foxx Fetches a list of services installed in the current database.
Returns a list of objects with the following attributes:
mount: the mount path of the service development: true if the service is running in development mode legacy: true if the service is running in 2.8 legacy compatibility mode provides: the service manifest&amp;rsquo;s provides value or an empty object Additionally the object may contain the following attributes if they have been set on the manifest:</description></item><item><title>HTTP interface for jobs</title><link>http://localhost/3.10/develop/http-api/jobs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/jobs/</guid><description>Get the results of an async job PUT /_api/job/{job-id} Returns the result of an async job identified by job-id. If the async job result is present on the server, the result will be removed from the list of result. That means this method can be called for each job-id once. The method will return the original job result&amp;rsquo;s headers and body, plus the additional HTTP header x-arango-async-job-id. If this header is present, then the job was found and the response contains the original job&amp;rsquo;s result.</description></item><item><title>HTTP interface for tasks</title><link>http://localhost/3.10/develop/http-api/tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/tasks/</guid><description>List all tasks GET /_api/tasks/ fetches all existing tasks on the server Responses 200 OK The list of tasks
Response Body application/json array of objects a list of all tasks
command* string The JavaScript function for this task.
created* number The timestamp when this task was created.
database* string The database this task belongs to.
id* string A string identifying the task.
name* string A user-friendly name for the task.</description></item><item><title>HTTP interface for batch requests</title><link>http://localhost/3.10/develop/http-api/batch-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/batch-requests/</guid><description>The batch request API is deprecated from version 3.8.0 on. This endpoint should no longer be used. To send multiple documents at once to an ArangoDB instance, please use the HTTP interface for documents that can insert, update, replace, or remove arrays of documents. Clients normally send individual operations to ArangoDB in individual HTTP requests. This is straightforward and simple, but has the disadvantage that the network overhead can be significant if many small requests are issued in a row.</description></item><item><title>HTTP interface for replication</title><link>http://localhost/3.10/develop/http-api/replication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/replication/</guid><description>The replication architecture and components are described in more details in Replication.
The HTTP replication interface serves four main purposes:
fetch initial data from a server (e.g. for a backup, or for the initial synchronization of data before starting the continuous replication applier) querying the state of a Leader fetch continuous changes from a Leader (used for incremental synchronization of changes) administer the replication applier (starting, stopping, configuring, querying state) on a Follower Note that if a per-database setup is used (as opposed to server-level replication), then the replication system must be configured individually per database, and replicating the data of multiple databases will require multiple operations.</description></item><item><title>Monitoring</title><link>http://localhost/3.10/develop/http-api/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/monitoring/</guid><description/></item><item><title>HTTP interfaces for security features</title><link>http://localhost/3.10/develop/http-api/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/security/</guid><description>Audit logging You can get and set the log level for the audit-* log topics using the regular endpoints for the log levels. See Logs.
The audit logging feature can otherwise only be configured using startup options. See Audit logging.
Encryption in transit Get the TLS data GET /_admin/server/tls Return a summary of the TLS data. The JSON response will contain a field result with the following components:
keyfile: Information about the key file.</description></item><item><title>HTTP interface for administration</title><link>http://localhost/3.10/develop/http-api/administration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/administration/</guid><description>Information Get the server version GET /_api/version Returns the server name and version number. The response is a JSON object with the following attributes: Path Parameters Query Parameters details boolean If set to true, the response will contain a details attribute with additional information about included components and their versions. The attribute names and internals of the details object may vary depending on platform and ArangoDB version.
HTTP Headers Responses 200 OK is returned in all cases.</description></item><item><title>HTTP interface for clusters</title><link>http://localhost/3.10/develop/http-api/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/cluster/</guid><description>Monitoring Get the statistics of a DB-Server GET /_admin/cluster/statistics Queries the statistics of the given DB-Server Path Parameters Query Parameters DBserver* string The ID of a DB-Server.
HTTP Headers Responses 200 OK is returned when everything went well.
400 Bad Request The DBserver parameter was not specified or is not the ID of a DB-Server.
403 Forbidden The specified server is not a DB-Server.
Get the cluster health GET /_admin/cluster/health Queries the health of the cluster as assessed by the supervision (Agency) for monitoring purposes.</description></item><item><title>HTTP interface for Hot Backups</title><link>http://localhost/3.10/develop/http-api/hot-backups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/http-api/hot-backups/</guid><description>ArangoDB Enterprise Edition Hot Backups are near instantaneous consistent snapshots of an entire ArangoDB deployment. This includes all databases, collections, indexes, Views, graphs, and users at any given time.
For creations a label may be specified, which if omitted is replaced with a generated UUID. This label is then combined with a timestamp to generate an identifier for the created hot backup. Subsequently, all other APIs operate on these identifiers.</description></item></channel></rss>