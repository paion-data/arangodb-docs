<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mapping on ArangoDB Documentation</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/</link><description>Recent content in Mapping on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/index.xml" rel="self" type="application/rss+xml"/><item><title>Document</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/document/</guid><description>Annotation @Document The annotations @Document applied to a class marks this class as a candidate for mapping to the database. The most relevant parameter is value to specify the collection name in the database. The annotation @Document specifies the collection type to DOCUMENT.
@Document(value=&amp;#34;persons&amp;#34;) public class Person { ... } Spring Expression support Spring Data ArangoDB supports the use of SpEL expressions within @Document#value. This feature lets you define a dynamic collection name which can be used to implement multi tenancy applications.</description></item><item><title>Edge</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/edge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/edge/</guid><description>Annotation @Edge The annotations @Edge applied to a class marks this class as a candidate for mapping to the database. The most relevant parameter is value to specify the collection name in the database. The annotation @Edge specifies the collection type to EDGE.
@Edge(&amp;#34;relations&amp;#34;) public class Relation { ... } Spring Expression support Spring Data ArangoDB supports the use of SpEL expressions within @Edge#value. This feature lets you define a dynamic collection name which can be used to implement multi tenancy applications.</description></item><item><title>Reference</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/reference/</guid><description>With the annotation @Ref applied on a field the nested object isn&amp;rsquo;t stored as a nested object in the document. The _id field of the nested object is stored in the document and the nested object has to be stored as a separate document in another collection described in the @Document annotation of the nested object class. To successfully persist an instance of your object the referencing field has to be null or it&amp;rsquo;s instance has to provide a field with the annotation @Id including a valid id.</description></item><item><title>Relations</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/relations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/relations/</guid><description>With the annotation @Relations applied on a collection or array field in a class annotated with @Document, the nested objects are fetched from the database over a graph traversal with your current object as the starting point. The most relevant parameter is edge. With edge you define the edge collection - which should be used in the traversal - using the class type. With the parameter depth you can define the maximal depth for the traversal (default 1) and the parameter direction defines whether the traversal should follow outgoing or incoming edges (default Direction.</description></item><item><title>Indexes</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/indexes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/indexes/</guid><description>Indexes can be ensured using the following annotations. For reference see the indexing documentation and specific aspects that apply to indexes on shards.
Annotation @&amp;lt;IndexType&amp;gt;Indexed With the @&amp;lt;IndexType&amp;gt;Indexed annotations user defined indexes can be created at a collection level by annotating single fields of a class.
Possible @&amp;lt;IndexType&amp;gt;Indexed annotations are:
@PersistentIndexed @GeoIndexed @FulltextIndexed @TtlIndexed The following example creates a persistent index on the field name and a separate persistent index on the field age:</description></item><item><title>Converter</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/converter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/converter/</guid><description>Registering a Spring Converter The ArangoConfiguration provides a convenient way to register Spring Converter by implementing the method customConverters().
Examples
@Configuration public class MyConfiguration implements ArangoConfiguration { @Override protected Collection&amp;lt;Converter&amp;lt;?, ?&amp;gt;&amp;gt; customConverters() { return Arrays.asList(new MyConverter()); } } Implementing a Spring Converter A Converter is used for reading if the source type is of type VPackSlice or DBDocumentEntity.
A Converter is used for writing if the target type is of type VPackSlice, DBDocumentEntity, BigInteger, BigDecimal, java.</description></item><item><title>Events</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/events/</guid><description>Spring Data ArangoDB includes several ApplicationEvent events that your application can respond to by registering subclasses of AbstractArangoEventListener in the ApplicationContext.
The following callback methods are present in AbstractArangoEventListener:
onAfterLoad: Called in ArangoTemplate#find and ArangoTemplate#query after the object is loaded from the database. onBeforeSave: Called in ArangoTemplate#insert/#update/#replace before the object is converted and send to the database. onAfterSave: Called in ArangoTemplate#insert/#update/#replace after the object is send to the database. onBeforeDelete: Called in ArangoTemplate#delete before the object is converted and send to the database.</description></item><item><title>Auditing</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/auditing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/auditing/</guid><description>Since version 3.0.0 Spring Data ArangoDB provides basic auditing functionality where you can track who made changes on your data and when.
To enable auditing you have to add the annotation @EnableArangoAuditing to your configuration class.
@Configuration @EnableArangoAuditing public class MyConfiguration implements ArangoConfiguration { We can now add fields to our model classes and annotate them with @CreateDate, @CreatedBy, @LastModifiedDate and @LastModifiedBy to store the auditing information. All annotation names should be self-explanatory.</description></item></channel></rss>