<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Data ArangoDB - Reference (version 3) on ArangoDB Documentation</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/</link><description>Recent content in Spring Data ArangoDB - Reference (version 3) on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/index.xml" rel="self" type="application/rss+xml"/><item><title>Template</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/template/</guid><description>ArangoTemplate mostly offers the features from the ArangoDB Java driver with additional exception translation from the drivers exceptions to the Spring Data access exceptions inheriting the DataAccessException class.
The ArangoTemplate class is the default implementation of the operations interface ArangoOperations which developers of Spring Data are encouraged to code against.</description></item><item><title>Repositories</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/repositories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/repositories/</guid><description>Spring Data Commons provides a composable repository infrastructure which Spring Data ArangoDB is built on. These allow for interface-based composition of repositories consisting of provided default implementations for certain interfaces (like CrudRepository) and custom implementations for other methods.
The base interface of Spring Data ArangoDB is ArangoRepository. It extends the Spring Data interfaces PagingAndSortingRepository and QueryByExampleExecutor. To get access to all Spring Data ArangoDB repository functionality simply create your own interface extending ArangoRepository&amp;lt;T, ID&amp;gt;.</description></item><item><title>Mapping</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-3/mapping/</guid><description>Conventions The Java class name is mapped to the collection name The non-static fields of a Java object are used as fields in the stored document The Java field name is mapped to the stored document field name All nested Java object are stored as nested objects in the stored document The Java class needs a constructor which meets the following criteria: in case of a single constructor: a non-parameterized constructor or a parameterized constructor in case of multiple constructors: a non-parameterized constructor or a parameterized constructor annotated with @PersistenceConstructor Type conventions ArangoDB uses VelocyPack&amp;nbsp; as it&amp;rsquo;s internal storage format which supports a large number of data types.</description></item></channel></rss>