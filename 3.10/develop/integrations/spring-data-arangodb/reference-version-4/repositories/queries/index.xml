<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Queries on ArangoDB Documentation</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-4/repositories/queries/</link><description>Recent content in Queries on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-4/repositories/queries/index.xml" rel="self" type="application/rss+xml"/><item><title>Derived queries</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-4/repositories/queries/derived-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-4/repositories/queries/derived-queries/</guid><description>Semantic parts Spring Data ArangoDB supports queries derived from methods names by splitting it into its semantic parts and converting into AQL. The mechanism strips the prefixes
find..By get..By query..By read..By stream..By count..By exists..By delete..By remove..By from the method and parses the rest. The By acts as a separator to indicate the start of the criteria for the query to be built. You can define conditions on entity properties and concatenate them with And and Or.</description></item><item><title>Query methods</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-4/repositories/queries/query-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-4/repositories/queries/query-methods/</guid><description>Queries using ArangoDB Query Language (AQL) can be supplied with the @Query annotation on methods.
Passing collection name Instead of writing the collection name statically into the query string, the placeholder #collection can be specified.
public interface MyRepository extends ArangoRepository&amp;lt;Customer, String&amp;gt;{ // FOR c IN customer RETURN c @Query(&amp;#34;FOR c IN #collection RETURN c&amp;#34;) ArangoCursor&amp;lt;Customer&amp;gt; query(); } Passing bind parameters There are three ways of passing bind parameters to the query in the query annotation.</description></item><item><title>Named queries</title><link>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-4/repositories/queries/named-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/develop/integrations/spring-data-arangodb/reference-version-4/repositories/queries/named-queries/</guid><description>An alternative to using the @Query annotation on methods is specifying them in a separate .properties file. The default path for the file is META-INF/arango-named-queries.properties and can be changed with the EnableArangoRepositories#namedQueriesLocation() setting. The entries in the properties file must adhere to the following convention: {simple entity name}.{method name} = {query}. Let&amp;rsquo;s assume we have the following repository interface:
package com.arangodb.repository; public interface CustomerRepository extends ArangoRepository&amp;lt;Customer, String&amp;gt; { Customer findByUsername(@Param(&amp;#34;username&amp;#34;) String username); } The corresponding arango-named-queries.</description></item></channel></rss>