<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Structure on ArangoDB Documentation</title><link>http://localhost/3.10/concepts/data-structure/</link><description>Recent content in Data Structure on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.10/concepts/data-structure/index.xml" rel="self" type="application/rss+xml"/><item><title>Databases</title><link>http://localhost/3.10/concepts/data-structure/databases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/concepts/data-structure/databases/</guid><description>ArangoDB can handle multiple databases in the same server instance. Databases can be used to logically group and separate data. An ArangoDB database consists of collections and dedicated database-specific worker processes. A database contains its own collections (which cannot be accessed from other databases), Foxx applications, and replication loggers and appliers. Each ArangoDB database contains its own system collections (e.g. _users, _graphs, &amp;hellip;).
There is always at least one database in ArangoDB.</description></item><item><title>Collections</title><link>http://localhost/3.10/concepts/data-structure/collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/concepts/data-structure/collections/</guid><description>A collection can contain a set of documents, similar to how a folder contains files. You can store documents with varying data structures in a single collection, but a collection is typically used to only store one type of entities. For example, you can use one collection for products, another for customers, and yet another for orders.
Collection types The regular type of collection is a document collection. If you use document collections for a graph, then they are referred to as vertex collections.</description></item><item><title>Documents</title><link>http://localhost/3.10/concepts/data-structure/documents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/concepts/data-structure/documents/</guid><description>Documents in ArangoDB are JSON objects that contain structured or semi-structured data. They are stored in collections.
Each document has an immutable key that identifies it within a collection, and an identifier derived from the key that uniquely identifies it within a database.
Data types Documents can store primitive values, lists of values, and nested objects (to any depth). JSON and thus ArangoDB supports the following data types:
null to represent the absence of a value, also known as nil or none type.</description></item><item><title>Views</title><link>http://localhost/3.10/concepts/data-structure/views/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/concepts/data-structure/views/</guid><description>Views allows you to perform complex searches at high performance. They are accelerated by inverted indexes that are updated near real-time.
A View is conceptually a transformation function over documents from zero or more collections. The transformation depends on the View type and the View configuration.
Views are powered by ArangoDB&amp;rsquo;s built-in search engine. See ArangoSearch for details.
View types Available View types:
The traditional arangosearch Views to which you link collections to.</description></item></channel></rss>