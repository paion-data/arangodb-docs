<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AQL functions on ArangoDB Documentation</title><link>http://localhost/3.10/aql/functions/</link><description>Recent content in AQL functions on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.10/aql/functions/index.xml" rel="self" type="application/rss+xml"/><item><title>ArangoSearch functions in AQL</title><link>http://localhost/3.10/aql/functions/arangosearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/arangosearch/</guid><description>You can form search expressions by composing ArangoSearch function calls, logical operators and comparison operators. This allows you to filter Views as well as to utilize inverted indexes to filter collections.
The AQL SEARCH operation accepts search expressions, such as PHRASE(doc.text, &amp;quot;foo bar&amp;quot;, &amp;quot;text_en&amp;quot;), for querying Views. You can combine ArangoSearch filter and context functions as well as operators like AND and OR to form complex search conditions. Similarly, the FILTER operation accepts such search expressions when using inverted indexes.</description></item><item><title>Array functions in AQL</title><link>http://localhost/3.10/aql/functions/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/array/</guid><description>You can use the AQL functions listed below to work with lists of items. Also see the numeric functions for functions that work on number arrays.
If you want to concatenate the elements of an array equivalent to join() in JavaScript, see CONCAT() and CONCAT_SEPARATOR() in the string functions chapter.
Apart from that, AQL also offers several language constructs:
simple array access of individual elements, array operators for array expansion and contraction, optionally with inline filter, limit and projection, array comparison operators to compare each element in an array to a value or the elements of another array, loop-based operations on arrays using FOR, SORT, LIMIT, as well as COLLECT for grouping, which also offers efficient aggregation.</description></item><item><title>Bit functions in AQL</title><link>http://localhost/3.10/aql/functions/bit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/bit/</guid><description>Introduced in: v3.7.7
Bit functions can operate on numeric integer values in the range between 0 and 4294967295 (232 - 1), both included. This allows treating numbers as bitsets of up to 32 members. Using any of the bit functions on numbers outside the supported range will make the function return null and register a warning.
The value range for the bit functions is conservatively small, so that no precision loss or rounding errors should occur when the input/output values of bit functions are passed around or sent over the wire to client applications with unknown precision number types.</description></item><item><title>Date functions in AQL</title><link>http://localhost/3.10/aql/functions/date/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/date/</guid><description>Date and time representations AQL offers functionality to work with dates, but it does not have a special data type for dates (neither does JSON, which is usually used as format to ship data into and out of ArangoDB). Instead, dates in AQL are represented by either numbers or strings.
All date function operations are done in the Unix time system. Unix time counts all non leap seconds beginning with January 1st 1970 00:00:00.</description></item><item><title>Document and object functions in AQL</title><link>http://localhost/3.10/aql/functions/document-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/document-object/</guid><description>You can use the below listed functions with the object data type. Also see object access for additional language constructs for objects.
ATTRIBUTES() ATTRIBUTES(document, removeSystemAttrs, sort) → strArray
Return the top-level attribute keys of the document as an array. Optionally omit system attributes and sort the array.
document (object): an arbitrary document / object removeSystemAttrs (bool, optional): whether all system attributes (starting with an underscore, such as _key and _id) shall be omitted in the result.</description></item><item><title>Fulltext functions in AQL</title><link>http://localhost/3.10/aql/functions/fulltext/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/fulltext/</guid><description>See fulltext indexes for details.
The fulltext index type is deprecated from version 3.10 onwards. It is recommended to use Inverted indexes or ArangoSearch for advanced full-text search capabilities. FULLTEXT() FULLTEXT(coll, attribute, query, limit) → docArray
Return all documents from collection coll, for which the attribute attribute matches the fulltext search phrase query, optionally capped to limit results.
Note: the FULLTEXT() function requires the collection coll to have a fulltext index on attribute.</description></item><item><title>Geo-spatial functions in AQL</title><link>http://localhost/3.10/aql/functions/geo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/geo/</guid><description>Geo-spatial data representations You can model geo-spatial information in different ways using the data types available in ArangoDB. The recommended way is to use objects with GeoJSON geometry but you can also use longitude and latitude coordinate pairs for points. Both models are supported by Geo-Spatial Indexes.
Coordinate pairs Longitude and latitude coordinates are numeric values and can be stored in the following ways:
Coordinates using an array with two numbers in [longitude, latitude] order, for example, in a user-chosen attribute called location:</description></item><item><title>Miscellaneous functions in AQL</title><link>http://localhost/3.10/aql/functions/miscellaneous/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/miscellaneous/</guid><description>Control flow functions FIRST_DOCUMENT() FIRST_DOCUMENT(alternative, ...) → doc
Return the first alternative that is a document, and null if none of the alternatives is a document.
alternative (any, repeatable): input of arbitrary type returns doc (object|null): document / object or null FIRST_LIST() FIRST_LIST(alternative, ...) → list
Return the first alternative that is an array, and null if none of the alternatives is an array.
alternative (any, repeatable): input of arbitrary type returns list (array|null): array / list or null MIN_MATCH() MIN_MATCH(expr1, .</description></item><item><title>Numeric functions in AQL</title><link>http://localhost/3.10/aql/functions/numeric/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/numeric/</guid><description>ABS() ABS(value) → unsignedValue
Return the absolute part of value.
value (number): any number, positive or negative returns unsignedValue (number): the number without + or - sign ABS(-5) // 5 ABS(+5) // 5 ABS(3.5) // 3.5 ACOS() ACOS(value) → num
Return the arccosine of value.
value (number): the input value returns num (number|null): the arccosine of value, or null if value is outside the valid range -1 and 1 (inclusive) ACOS(-1) // 3.</description></item><item><title>String functions in AQL</title><link>http://localhost/3.10/aql/functions/string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/string/</guid><description>CHAR_LENGTH() CHAR_LENGTH(str) → length
Return the number of characters in str (not byte length).
Input Length String Number of Unicode characters Number Number of Unicode characters that represent the number Array Number of Unicode characters from the resulting stringification Object Number of Unicode characters from the resulting stringification true 4 false 5 null 0 str (string): a string. If a number is passed, it will be casted to string first.</description></item><item><title>Type check and cast functions in AQL</title><link>http://localhost/3.10/aql/functions/type-check-and-cast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.10/aql/functions/type-check-and-cast/</guid><description>Some operators expect their operands to have a certain data type. For example, logical operators expect their operands to be boolean values, and the arithmetic operators expect their operands to be numeric values. If an operation is performed with operands of other types, an automatic conversion to the expected types is tried. This is called implicit type casting. It helps to avoid query aborts.
Type casts can also be performed upon request by invoking a type cast function.</description></item></channel></rss>