<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Start using AQL on ArangoDB Documentation</title><link>http://localhost/3.13/get-started/start-using-aql/</link><description>Recent content in Start using AQL on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.13/get-started/start-using-aql/index.xml" rel="self" type="application/rss+xml"/><item><title>Game of Thrones example dataset</title><link>http://localhost/3.13/get-started/start-using-aql/dataset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/get-started/start-using-aql/dataset/</guid><description>Characters The dataset features 43 characters with their name, surname, age, alive status and trait references. Each character also has a document key derived from the character&amp;rsquo;s name. The surname and age properties are not always present.
_key name surname alive age traits ned Ned Stark true 41 A, H, C, N, P robert Robert Baratheon false A, H, C jaime Jaime Lannister true 36 A, F, B catelyn Catelyn Stark false 40 D, H, C cersei Cersei Lannister true 36 H, E, F daenerys Daenerys Targaryen true 16 D, H, C jorah Jorah Mormont false A, B, C, F petyr Petyr Baelish false E, G, F viserys Viserys Targaryen false O, L, N jon Jon Snow true 16 A, B, C, F sansa Sansa Stark true 13 D, I, J arya Arya Stark true 11 C, K, L robb Robb Stark false A, B, C, K theon Theon Greyjoy true 16 E, R, K bran Bran Stark true 10 L, J joffrey Joffrey Baratheon false 19 I, L, O sandor Sandor Clegane true A, P, K, F tyrion Tyrion Lannister true 32 F, K, M, N khal Khal Drogo false A, C, O, P tywin Tywin Lannister false O, M, H, F davos Davos Seaworth true 49 C, K, P, F samwell Samwell Tarly true 17 C, L, I stannis Stannis Baratheon false H, O, P, M melisandre Melisandre true G, E, H margaery Margaery Tyrell false M, D, B jeor Jeor Mormont false C, H, M, P bronn Bronn true K, E, C varys Varys true M, F, N, E shae Shae false M, D, G talisa Talisa Maegyr false D, C, B gendry Gendry false K, C, A ygritte Ygritte false A, P, K tormund Tormund Giantsbane true C, P, A, I gilly Gilly true L, J brienne Brienne Tarth true 32 P, C, A, K ramsay Ramsay Bolton true E, O, G, A ellaria Ellaria Sand true P, O, A, E daario Daario Naharis true K, P, A missandei Missandei true D, L, C, M tommen Tommen Baratheon true I, L, B jaqen Jaqen H&amp;rsquo;ghar true H, F, K roose Roose Bolton true H, E, F, A high-sparrow The High Sparrow true H, M, F, O Traits There are 18 unique traits.</description></item><item><title>AQL CRUD operations</title><link>http://localhost/3.13/get-started/start-using-aql/crud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/get-started/start-using-aql/crud/</guid><description>Create documents Before you can insert documents with AQL, you need a place to put them in â€“ a collection. You can manage collections via different interfaces including the web interface, arangosh, or a driver. It is not possible to do so with AQL, however.
In the web interface, click Collections in the main navigation. Click the Add Collection button. Enter Characters as the Name. Leave the Type set to the default value of Document.</description></item><item><title>Match documents with `FILTER`</title><link>http://localhost/3.13/get-started/start-using-aql/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/get-started/start-using-aql/filter/</guid><description>So far, you either looked up a single document, or returned the entire character collection. For the lookup, you used the DOCUMENT() function, which means you can only find documents by their key or ID.
To find documents that fulfill certain criteria more complex than key equality, there is the FILTER operation in AQL, which enables you to formulate arbitrary conditions for documents to match.
Equality condition FOR c IN Characters FILTER c.</description></item><item><title>Sort and limit</title><link>http://localhost/3.13/get-started/start-using-aql/sort-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/get-started/start-using-aql/sort-limit/</guid><description>Cap the result count with LIMIT It may not always be necessary to return all documents, that a FOR loop would normally return. You can limit the amount of documents with a LIMIT operation:
FOR c IN Characters LIMIT 5 RETURN c.name [ &amp;#34;Joffrey&amp;#34;, &amp;#34;Tommen&amp;#34;, &amp;#34;Tyrion&amp;#34;, &amp;#34;Roose&amp;#34;, &amp;#34;Tywin&amp;#34; ] LIMIT is followed by a number for the maximum document count. There is a second syntax however, which allows you to skip a certain amount of record and return the next n documents:</description></item><item><title>References and joins</title><link>http://localhost/3.13/get-started/start-using-aql/joins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/get-started/start-using-aql/joins/</guid><description>References to other documents The character data you imported has an attribute traits for each character, which is an array of strings. It does not store character features directly, however:
{ &amp;#34;_key&amp;#34;: &amp;#34;ned&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Ned&amp;#34;, &amp;#34;surname&amp;#34;: &amp;#34;Stark&amp;#34;, &amp;#34;alive&amp;#34;: false, &amp;#34;age&amp;#34;: 41, &amp;#34;traits&amp;#34;: [&amp;#34;A&amp;#34;,&amp;#34;H&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;N&amp;#34;,&amp;#34;P&amp;#34;] } It is rather a list of letters without an apparent meaning. The idea here is that traits is supposed to store documents keys of another collection, which you can use to resolve the letters to labels such as &amp;ldquo;strong&amp;rdquo;.</description></item><item><title>Graphs and traversals</title><link>http://localhost/3.13/get-started/start-using-aql/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/get-started/start-using-aql/graphs/</guid><description>Relations such as between parents and children can be modeled as graph. In ArangoDB, two documents (a parent and a child character document) can be linked by an edge document. Edge documents are stored in edge collections and have two additional attributes: _from and _to. They reference any two documents by their document IDs (_id).
ChildOf relations Our characters have the following relations between parents and children (first names only for a better overview):</description></item><item><title>Geospatial queries</title><link>http://localhost/3.13/get-started/start-using-aql/geo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/get-started/start-using-aql/geo/</guid><description>Geospatial coordinates consisting of a latitude and longitude value can be stored either as two separate attributes, or as a single attribute in the form of an array with both numeric values. ArangoDB can index such coordinates for fast geospatial queries.
Locations data Insert some filming locations into a new collection called Locations, which you need to create first, and then run below AQL query:
LET places = [ { &amp;#34;name&amp;#34;: &amp;#34;Dragonstone&amp;#34;, &amp;#34;coordinates&amp;#34;: [ 55.</description></item></channel></rss>