<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Information Retrieval with ArangoSearch on ArangoDB Documentation</title><link>http://localhost/3.13/index-and-search/arangosearch/</link><description>Recent content in Information Retrieval with ArangoSearch on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.13/index-and-search/arangosearch/index.xml" rel="self" type="application/rss+xml"/><item><title>Example Datasets for ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/example-datasets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/example-datasets/</guid><description>IMDB Movie Dataset This is a movies and actors dataset based on data of the Internet Movie Database&amp;nbsp; (IMDB). It was converted into a graph. Also see the arangodb/example-datasets&amp;nbsp; repository.
Download imdb_graph_dump_rev2.zip&amp;nbsp; (6.45 MB) Unpack the downloaded archive Restore the folder dump with arangorestore into an ArangoDB instance, e.g. arangorestore --server.endpoint tcp://localhost:8529 --server.database IMDB --create-database --include-system-collections --input-directory dump Create a View called imdb in the IMDB database. You can find various View configuration examples in this chapter.</description></item><item><title>Matching Exact Values with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/exact-value-matching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/exact-value-matching/</guid><description>If you want to find strictly equal values, then the identity Analyzer is what you need. It will not apply any transformations. It is a no-operation Analyzer that passes everything through unaltered.
Matching an Exact String You can index and search strings with the identity Analyzer for exact matching, that is case-sensitive, with accented characters as-is, and only if the entire string is equal (not matching substrings).
Dataset IMDB movie dataset</description></item><item><title>Range Queries with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/range-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/range-queries/</guid><description>The primary use case for range queries is to search numeric values in documents that are
greater than (exclusive), greater than or equal (inclusive), less than (exclusive), less than or equal (inclusive) to a reference number, or between two numbers (inclusive or exclusive) Range queries are also possible for string values.
Comparing to a Number Numbers are not processed by Analyzers. They even bypass the identity Analyzer. Therefore, you do not need to specify Analyzers in View definitions and no Analyzer context in queries with the ANALYZER() function for numeric fields.</description></item><item><title>Prefix Search with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/prefix-matching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/prefix-matching/</guid><description>A typical use case for matching prefixes is to provide word completion (auto-complete). If the requirement is to find exact prefix matches only then indexing strings with the identity Analyzer is sufficient. The search term needs to have the original capitalization to match (case-sensitive) in that case.
Prefix matching can be used together with normalizing Analyzers (norm, text) for case-insensitive and accent-insensitive searches. This is often preferable over exact prefix matching in auto-complete scenarios, because users may type everything in lower case and not use characters with diacritical marks but just the base characters.</description></item><item><title>Case-insensitive Search with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/case-sensitivity-and-diacritics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/case-sensitivity-and-diacritics/</guid><description>Normalizing a Single Token Dataset IMDB movie dataset
Custom Analyzer Create a norm Analyzer in arangosh to normalize case to all lowercase and to remove diacritics:
//db._useDatabase(&amp;#34;your_database&amp;#34;); // Analyzer will be created in current database var analyzers = require(&amp;#34;@arangodb/analyzers&amp;#34;); analyzers.save(&amp;#34;norm_en&amp;#34;, &amp;#34;norm&amp;#34;, { locale: &amp;#34;en&amp;#34;, accent: false, case: &amp;#34;lower&amp;#34; }, []); No Analyzer features are set because the examples on this page don&amp;rsquo;t require them.
View definition search-alias View arangosearch View db.</description></item><item><title>Wildcard Search with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/wildcard-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/wildcard-search/</guid><description>You can use the LIKE() function and LIKE operator for this search technique to find strings that start with, contain, or end with a certain substring. You can also search for complex patterns with multiple placeholders. Place the special characters _ and % as wildcards for any single or zero-or-more characters in the search string to match multiple partial strings.
prefix% %infix% %suffix %complex%pat_ern Wildcard searching can be an alternative to tokenizing text into words and then searching for words in a particular order (Phrase and Proximity Search).</description></item><item><title>Searching Full-text with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/full-text-token-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/full-text-token-search/</guid><description>Full-text strings can be tokenized by text Analyzers so that each token (usually a word) gets indexed separately. Subsequently, it becomes possible to search for individual tokens. This is also possible with arrays of strings, where each element is one token (or multiple, additionally tokenized by a text Analyzer).
There are two ways to search for tokens:
Token search: The tokens can occur in any order. The words you search for merely need to be contained in the source string somehow.</description></item><item><title>Phrase and Proximity Search with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/phrase-and-proximity-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/phrase-and-proximity-search/</guid><description>With phrase search, you can query for tokens in a certain order. This allows you to match partial or full sentences. You can also specify how many arbitrary tokens may occur between defined tokens for word proximity searches.
Dataset IMDB movie dataset
View definition search-alias View arangosearch View db.imdb_vertices.ensureIndex({ name: &amp;#34;inv-text&amp;#34;, type: &amp;#34;inverted&amp;#34;, fields: [ { name: &amp;#34;description&amp;#34;, analyzer: &amp;#34;text_en&amp;#34; } ] }); db._createView(&amp;#34;imdb&amp;#34;, &amp;#34;search-alias&amp;#34;, { indexes: [ { collection: &amp;#34;imdb_vertices&amp;#34;, index: &amp;#34;inv-text&amp;#34; } ] }); { &amp;#34;links&amp;#34;: { &amp;#34;imdb_vertices&amp;#34;: { &amp;#34;fields&amp;#34;: { &amp;#34;description&amp;#34;: { &amp;#34;analyzers&amp;#34;: [ &amp;#34;text_en&amp;#34; ] } } } } } Phrase Search AQL queries Search for movies that have the (normalized and stemmed) tokens biggest and blockbust in their description, in this order:</description></item><item><title>Faceted Search with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/faceted-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/faceted-search/</guid><description>A popular method for filtering items in an online shop is to display product categories in a list, together with the number of items in each category. This way, users get an idea of how many items will be left after applying a certain filter before they actually enable it. This concept can be extended to any properties, also called facets.
To implement such a feature in ArangoDB, you can use a COLLECT operation to group and count how many documents share an attribute value.</description></item><item><title>Fuzzy Search with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/fuzzy-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/fuzzy-search/</guid><description>Fuzzy search is an umbrella term for various approximate matching algorithms. What they allow you to do is to find matches even if the search terms are not spelled exactly like the words in the stored text. This includes terms that are similar, alternatively spelled, or mistyped but potentially relevant for the search request as well.
If you want to try out fuzzy search with ArangoDB for yourself, then check out our interactive Fuzzy Search tutorial&amp;nbsp;.</description></item><item><title>Geospatial Search with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/geospatial-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/geospatial-search/</guid><description>ArangoSearch can accelerate various types of geospatial queries for data that is indexed by a View. The regular geospatial index can do most of this too, but ArangoSearch allows you to combine geospatial requests with other kinds of searches, like full-text search.
Creating geospatial Analyzers Geospatial data that can be indexed:
GeoJSON features such as Points and Polygons (with coordinates in [longitude, latitude] order), for example:
{ &amp;#34;location&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;Point&amp;#34;, &amp;#34;coordinates&amp;#34;: [ -73.</description></item><item><title>Search highlighting with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/search-highlighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/search-highlighting/</guid><description>ArangoDB Enterprise Edition ArangoGraph ArangoSearch lets you search for terms and phrases in full-text, and more. It only returns matching documents, however. With search highlighting, you can get the exact locations of the matches.
A common use case is to emphasize the matching parts in client applications, for example, with a background color or an underline, so that users can easily see and understand the matches.
How to use search highlighting To use search highlighting, you need to index the respective attributes with Analyzers that have the offset feature enabled.</description></item><item><title>Nested search with ArangoSearch</title><link>http://localhost/3.13/index-and-search/arangosearch/nested-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/nested-search/</guid><description>ArangoDB Enterprise Edition ArangoGraph By default, arangosearch Views index arrays as if the parent attribute had multiple values at once. This is also supported for search-alias Views by enabling the searchField option. With trackListPositions set to true, every array element is indexed individually and can be queried separately using the respective array index. With the nested search feature, you get another option for indexing arrays, in particular nested objects in arrays.</description></item><item><title>Ranking View Query Results</title><link>http://localhost/3.13/index-and-search/arangosearch/ranking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/ranking/</guid><description>ArangoSearch supports the two most popular ranking schemes:
Okapi BM25&amp;nbsp; TF-IDF&amp;nbsp; Under the hood, both models rely on two main components:
Term frequency (TF): in the simplest case defined as the number of times a term occurs in a document Inverse document frequency (IDF): a measure of how relevant a term is, i.e. whether the word is common or rare across all documents See Ranking in ArangoSearch in the ArangoSearch Tutorial&amp;nbsp; to learn more about the ranking model.</description></item><item><title>Optimizing View and inverted index query performance</title><link>http://localhost/3.13/index-and-search/arangosearch/performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/performance/</guid><description>Primary Sort Order Inverted indexes and arangosearch Views can have a primary sort order. A direction can be specified upon their creation for each uniquely named attribute (ascending or descending), to enable an optimization for AQL queries which iterate over a collection or View and sort by one or multiple of the indexed attributes. If the field(s) and the sorting direction(s) match, then the data can be read directly from the index without actual sort operation.</description></item><item><title>`search-alias` Views Reference</title><link>http://localhost/3.13/index-and-search/arangosearch/search-alias-views-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/search-alias-views-reference/</guid><description>search-alias Views let you add one or more inverted indexes to a View, enabling federate searching, sorting search results by relevance, and search highlighting, on top of sophisticated information retrieval capabilities such as full-text search for unstructured or semi-structured data provided by the inverted indexes that they are comprised of.
How to use search-alias Views You need to create one or more inverted indexes. All settings about how data shall be indexed are part of the inverted index definition.</description></item><item><title>`arangosearch` Views Reference</title><link>http://localhost/3.13/index-and-search/arangosearch/arangosearch-views-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/index-and-search/arangosearch/arangosearch-views-reference/</guid><description>arangosearch Views enable sophisticated information retrieval queries such as full-text search for unstructured or semi-structured data over documents from different collections, filtering on multiple document attributes and sorting the documents that satisfy the search criteria by relevance.
Views guarantee the best execution plan (merge join) when querying multiple attributes, unlike collections with user-defined indexes.
Views can be managed as follows:
in the web interface, in the Views section via the Views HTTP API through the JavaScript API Once you set up a View, you can query it via AQL with the SEARCH operation.</description></item></channel></rss>