<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Related modules for Foxx on ArangoDB Documentation</title><link>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/</link><description>Recent content in Related modules for Foxx on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.13/develop/foxx-microservices/reference/related-modules/index.xml" rel="self" type="application/rss+xml"/><item><title>Foxx Authentication</title><link>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/authentication/</guid><description>const createAuth = require('@arangodb/foxx/auth');
Authenticators allow implementing basic password mechanism using simple built-in hashing functions.
Creating an authenticator createAuth([options]): Authenticator
Creates an authenticator.
Arguments
options: Object (optional)
An object with the following properties:
method: string (Default: &amp;quot;sha256&amp;quot;)
The hashing algorithm to use to create password hashes. The authenticator is able to verify passwords against hashes using any supported hashing algorithm. This only affects new hashes created by the authenticator.
Supported values:</description></item><item><title>Foxx OAuth 1.0a</title><link>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/oauth-1-0a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/oauth-1-0a/</guid><description>const createOAuth1Client = require('@arangodb/foxx/oauth1');
The OAuth1 module provides abstractions over OAuth 1.0a providers like Twitter, XING and Tumblr.
Examples
const router = createRouter(); const oauth1 = createOAuth1Client({ // We&amp;#39;ll use Twitter for this example requestTokenEndpoint: &amp;#39;https://api.twitter.com/oauth/request_token&amp;#39;, authEndpoint: &amp;#39;https://api.twitter.com/oauth/authorize&amp;#39;, accessTokenEndpoint: &amp;#39;https://api.twitter.com/oauth/access_token&amp;#39;, activeUserEndpoint: &amp;#39;https://api.twitter.com/1.1/account/verify_credentials.json&amp;#39;, clientId: &amp;#39;keyboardcat&amp;#39;, clientSecret: &amp;#39;keyboardcat&amp;#39; }); module.context.use(&amp;#39;/oauth1&amp;#39;, router); // See the user management example for setting up the // sessions and users objects used in this example router.use(sessions); router.post(&amp;#39;/auth&amp;#39;, function (req, res) { const url = req.</description></item><item><title>Foxx OAuth 2.0</title><link>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/oauth-2-0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/oauth-2-0/</guid><description>const createOAuth2Client = require('@arangodb/foxx/oauth2');
The OAuth2 module provides abstractions over OAuth 2.0 providers like Facebook, GitHub and Google.
Examples
const crypto = require(&amp;#39;@arangodb/crypto&amp;#39;); const router = createRouter(); const oauth2 = createOAuth2Client({ // We&amp;#39;ll use Facebook for this example authEndpoint: &amp;#39;https://www.facebook.com/dialog/oauth&amp;#39;, tokenEndpoint: &amp;#39;https://graph.facebook.com/oauth/access_token&amp;#39;, activeUserEndpoint: &amp;#39;https://graph.facebook.com/v2.0/me&amp;#39;, clientId: &amp;#39;keyboardcat&amp;#39;, clientSecret: &amp;#39;keyboardcat&amp;#39; }); module.context.use(&amp;#39;/oauth2&amp;#39;, router); // See the user management example for setting up the // sessions and users objects used in this example router.</description></item><item><title>Foxx GraphQL integration</title><link>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/graphql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/graphql/</guid><description>const createGraphQLRouter = require('@arangodb/foxx/graphql');
The @arangodb/foxx/graphql module lets you create routers for serving GraphQL requests, which closely mimics the behavior of the express-graphql module&amp;nbsp;.
For an example of a GraphQL schema in Foxx that resolves fields using the database see the GraphQL example service&amp;nbsp; (also available from the Foxx store).
Starting with graphql version 0.12 you can use the official graphql library&amp;nbsp; if you include it in the node_modules folder of your service bundle and pass it to the graphql option:</description></item><item><title>Foxx queues</title><link>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/queues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/foxx-microservices/reference/related-modules/queues/</guid><description>const queues = require('@arangodb/foxx/queues')
Foxx allows defining job queues that let you perform slow or expensive actions asynchronously. These queues can be used to send e-mails, call external APIs or perform other actions that you do not want to perform directly or want to retry on failure.
Foxx queue jobs can be any script named in the manifest of a service in the same database.
Please note that Foxx queues are database-specific.</description></item></channel></rss>