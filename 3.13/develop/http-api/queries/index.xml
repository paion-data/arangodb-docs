<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTTP interfaces for queries on ArangoDB Documentation</title><link>http://localhost/3.13/develop/http-api/queries/</link><description>Recent content in HTTP interfaces for queries on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.13/develop/http-api/queries/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP interfaces for AQL queries</title><link>http://localhost/3.13/develop/http-api/queries/aql-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/http-api/queries/aql-queries/</guid><description>Cursors Results of AQL queries are returned as cursors in order to batch the communication between server and client. Each batch contains a number of documents and an indication if the current batch is the final batch. Depending on the query, the total number of documents in the result set may or may not be known in advance.
If the number of documents doesn&amp;rsquo;t exceed the batch size, the full query result is returned to the client in a single round-trip.</description></item><item><title>HTTP interface for the query plan cache</title><link>http://localhost/3.13/develop/http-api/queries/aql-query-plan-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/http-api/queries/aql-query-plan-cache/</guid><description>Introduced in: v3.12.4
To cache execution plans for AQL queries as well as to utilize cached plans, set the usePlanCache query option to true when issuing a query. See HTTP interfaces for AQL queries for details and The execution plan cache for AQL queries for general information about the feature.
List the entries of the AQL query plan cache GET /_db/{database-name}/_api/query-plan-cache Returns an array containing information about each AQL execution plan currently stored in the cache of the selected database.</description></item><item><title>HTTP interface for the query results cache</title><link>http://localhost/3.13/develop/http-api/queries/aql-query-results-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/http-api/queries/aql-query-results-cache/</guid><description>See The AQL query results cache for a description of the feature and the configuration options.
The AQL query results cache is only available for single servers, i.e. servers that are not part of a cluster setup. List the entries of the AQL query results cache GET /_db/{database-name}/_api/query-cache/entries Returns an array containing the AQL query results currently stored in the query results cache of the selected database. Path Parameters database-name* string The name of the database.</description></item><item><title>HTTP interface for user-defined AQL functions</title><link>http://localhost/3.13/develop/http-api/queries/user-defined-aql-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/http-api/queries/user-defined-aql-functions/</guid><description>AQL user functions are a means to extend the functionality of ArangoDB&amp;rsquo;s query language (AQL) with user-defined JavaScript code.
For an overview of over AQL user functions and their implications, please refer to Extending AQL.
All user functions managed through this interface are stored in the _aqlfunctions system collection. You should not modify the documents in this collection directly, but only via the dedicated interfaces.
Create a user-defined AQL function POST /_db/{database-name}/_api/aqlfunction Registers a user-defined function (UDF) written in JavaScript for the use in AQL queries in the current database.</description></item></channel></rss>