<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript API on ArangoDB Documentation</title><link>http://localhost/3.13/develop/javascript-api/</link><description>Recent content in JavaScript API on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.13/develop/javascript-api/index.xml" rel="self" type="application/rss+xml"/><item><title>The `@arangodb` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/@arangodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/@arangodb/</guid><description>const arangodb = require('@arangodb')
This module should not be confused with the arangojs JavaScript driver&amp;nbsp; which can be used to access ArangoDB from outside the database. Although the APIs share similarities and the functionality overlaps, the two are not compatible with each other and cannot be used interchangeably. The db object The db object represents the current database and lets you access collections and Views, run AQL queries, and more. For more information, see the db object.</description></item><item><title>The `@arangodb/actions` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/actions/</guid><description>const actions = require('@arangodb/actions')
If you want to define HTTP endpoints in ArangoDB you should probably use the Foxx microservice framework instead.
Basics Error message actions.getErrorMessage(code)
Returns the error message for an error code.
Standard HTTP Result Generators actions.defineHttp(options)
Defines a new action. The options are as follows:
options.url
The URL, which can be used to access the action. This path might contain slashes. Note that this action will also be called, if a url is given such that options.</description></item><item><title>The `@arangodb/analyzers` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/analyzers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/analyzers/</guid><description>The JavaScript API can be accessed via the @arangodb/analyzers module from both server-side and client-side code (arangosh, Foxx):
var analyzers = require(&amp;#34;@arangodb/analyzers&amp;#34;); See Analyzers for general information and details about the attributes.
Analyzer Module Methods Create an Analyzer var analyzer = analyzers.save(&amp;lt;name&amp;gt;, &amp;lt;type&amp;gt;[, &amp;lt;properties&amp;gt;[, &amp;lt;features&amp;gt;]]) Create a new Analyzer with custom configuration in the current database.
name (string): name for identifying the Analyzer later type (string): the kind of Analyzer to create properties (object, optional): settings specific to the chosen type.</description></item><item><title>The `@arangodb/aql/queries` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/aql-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/aql-queries/</guid><description>const queries = require('@arangodb/aql/queries')
Properties queries.properties() Returns the servers current query tracking configuration; we change the slow query threshold to get better results:
var queries = require(&amp;#34;@arangodb/aql/queries&amp;#34;); queries.properties(); queries.properties({slowQueryThreshold: 1}); queries.properties({slowStreamingQueryThreshold: 1}); Show output { &amp;#34;code&amp;#34; : 200, &amp;#34;enabled&amp;#34; : true, &amp;#34;trackSlowQueries&amp;#34; : true, &amp;#34;trackBindVars&amp;#34; : true, &amp;#34;maxSlowQueries&amp;#34; : 64, &amp;#34;slowQueryThreshold&amp;#34; : 10, &amp;#34;slowStreamingQueryThreshold&amp;#34; : 10, &amp;#34;maxQueryStringLength&amp;#34; : 4096 } { &amp;#34;code&amp;#34; : 200, &amp;#34;enabled&amp;#34; : true, &amp;#34;trackSlowQueries&amp;#34; : true, &amp;#34;trackBindVars&amp;#34; : true, &amp;#34;maxSlowQueries&amp;#34; : 64, &amp;#34;slowQueryThreshold&amp;#34; : 1, &amp;#34;slowStreamingQueryThreshold&amp;#34; : 10, &amp;#34;maxQueryStringLength&amp;#34; : 4096 } { &amp;#34;code&amp;#34; : 200, &amp;#34;enabled&amp;#34; : true, &amp;#34;trackSlowQueries&amp;#34; : true, &amp;#34;trackBindVars&amp;#34; : true, &amp;#34;maxSlowQueries&amp;#34; : 64, &amp;#34;slowQueryThreshold&amp;#34; : 1, &amp;#34;slowStreamingQueryThreshold&amp;#34; : 1, &amp;#34;maxQueryStringLength&amp;#34; : 4096 } Currently running queries We create a task that spawns queries, so we have nice output.</description></item><item><title>The `@arangodb/crypto` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/crypto/</guid><description>const crypto = require('@arangodb/crypto')
Nonces These functions deal with cryptographic nonces&amp;nbsp;.
For single server use only.
createNonce crypto.createNonce(): string
Creates a cryptographic nonce consisting of the first 32 bits of a timestamp and 64 bit of randomness.
The nonce is held in memory for approximately one hour by the server.
Returns the created nonce as base64-encoded string.
checkAndMarkNonce crypto.checkAndMarkNonce(nonce): void
Checks if the nonce is valid and marks it as used.</description></item><item><title>The `@arangodb/request` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/request/</guid><description>const request = require('@arangodb/request')
Making HTTP requests HTTP method helpers In addition to the request function convenience shorthands are available for each HTTP method in the form of, i.e.:
request.head(url, options) request.get(url, options) request.post(url, options) request.put(url, options) request.delete(url, options) request.patch(url, options) These are equivalent to using the request function directly, i.e.:
request[method](url, options) // is equivalent to request({method, url, ...options}); For example:
const request = require(&amp;#39;@arangodb/request&amp;#39;); request.get(&amp;#39;http://localhost&amp;#39;, {headers: {&amp;#39;x-session-id&amp;#39;: &amp;#39;keyboardcat&amp;#39;}}); // is equivalent to request({ method: &amp;#39;get&amp;#39;, url: &amp;#39;http://localhost&amp;#39;, headers: {&amp;#39;x-session-id&amp;#39;: &amp;#39;keyboardcat&amp;#39;} }); The request function The request function can be used to make HTTP requests.</description></item><item><title>The `@arangodb/tasks` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/tasks/</guid><description>const tasks = require('@arangodb/tasks')
Note: If you are trying to schedule tasks in Foxx you should consider using the Foxx queues module instead, which provides a more high-level API that also persists tasks across reboots.
Introduction to Task Management in ArangoDB ArangoDB can execute user-defined JavaScript functions as one-shot or periodic tasks. This functionality can be used to implement timed or recurring jobs in the database.
Tasks in ArangoDB consist of a JavaScript snippet or function that is executed when the task is scheduled.</description></item><item><title>The `console` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/console/</guid><description>global.console === require('console')
Note: You don&amp;rsquo;t need to load this module directly. The console object is globally defined throughout ArangoDB and provides access to all functions in this module.
Format Strings The following format specifiers can be used in format strings, which are accepted by various console methods (look for the format parameter below):
%s: string %d, %i: integer number %f: floating point number %o: object (circular references marked with ~) %%: literal percent sign % Example:</description></item><item><title>The `fs` module of the JavaScript API</title><link>http://localhost/3.13/develop/javascript-api/fs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.13/develop/javascript-api/fs/</guid><description>const fs = require('fs')
The implementation tries to follow the CommonJS Filesystem/A/0&amp;nbsp; specification where possible.
Working Directory The directory functions below shouldn&amp;rsquo;t use the current working directory of the server like . or ./test. You will not be able to tell whether the environment the server is running in will permit directory listing, reading or writing of files.
You should either base your directories with getTempPath(), or as a Foxx service use the module.</description></item></channel></rss>