<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deploy ArangoDB on ArangoDB Documentation</title><link>http://localhost/3.11/deploy/</link><description>Recent content in Deploy ArangoDB on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.11/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>Single instance deployments</title><link>http://localhost/3.11/deploy/single-instance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/single-instance/</guid><description>Using a single server or single instance means to run the ArangoDB server binary arangod stand-alone, without replication, without failover opportunity, and not as a cluster together with other nodes.
You may run multiple processes of arangod side-by-side on the same machine as single instances, as long as they are configured for different ports and data folders. The official installers may not support multiple installations side-by-side, but you can get archive packages and unpack them manually.</description></item><item><title>Active Failover deployments</title><link>http://localhost/3.11/deploy/active-failover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/active-failover/</guid><description>An Active Failover is defined as:
One ArangoDB Single-Server instance which is read / writable by clients called Leader One or more ArangoDB Single-Server instances, which are passive and not writable called Followers, which asynchronously replicate data from the Leader At least one Agency acting as a &amp;ldquo;witness&amp;rdquo; to determine which server becomes the leader in a failure situation An Active Failover behaves differently from an ArangoDB Cluster, please see the limitations section for more details.</description></item><item><title>Cluster deployments</title><link>http://localhost/3.11/deploy/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/cluster/</guid><description>The Cluster architecture of ArangoDB is a CP master/master model with no single point of failure.
With &amp;ldquo;CP&amp;rdquo; in terms of the CAP theorem&amp;nbsp; we mean that in the presence of a network partition, the database prefers internal consistency over availability. With &amp;ldquo;master/master&amp;rdquo; we mean that clients can send their requests to an arbitrary node, and experience the same view on the database regardless. &amp;ldquo;No single point of failure&amp;rdquo; means that the cluster can continue to serve requests, even if one machine fails completely.</description></item><item><title>OneShard cluster deployments</title><link>http://localhost/3.11/deploy/oneshard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/oneshard/</guid><description>ArangoDB Enterprise Edition ArangoGraph The OneShard option for ArangoDB clusters restricts all collections of a database to a single shard so that every collection has numberOfShards set to 1, and all leader shards are placed on one DB-Server node. This way, whole queries can be pushed to and executed on that server, massively reducing cluster-internal communication. The Coordinator only gets back the final result.
Queries are always limited to a single database, and with the data of a whole database on a single node, the OneShard option allows running transactions with ACID guarantees on shard leaders.</description></item><item><title>Datacenter-to-Datacenter Replication</title><link>http://localhost/3.11/deploy/arangosync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/arangosync/</guid><description>ArangoDB Enterprise Edition At some point in the grows of a database, there comes a need for replicating it across multiple datacenters.
Reasons for that can be:
Fallback in case of a disaster in one datacenter Regional availability Separation of concerns And many more.
ArangoDB supports Datacenter-to-Datacenter Replication, via the arangosync tool.
ArangoDB&amp;rsquo;s Datacenter-to-Datacenter Replication is a solution that enables you to asynchronously replicate the entire structure and content in an ArangoDB Cluster in one place to a Cluster in another place.</description></item><item><title>ArangoDB Kubernetes Operator</title><link>http://localhost/3.11/deploy/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/kubernetes/</guid><description>The Kubernetes operator lets you do the following:
Manage deployments of the ArangoDB database Manage backups Provide PersistentVolumes on local storage of your nodes for optimal storage performance Configure ArangoDB Datacenter-to-Datacenter Replication Continue with Using the ArangoDB Kubernetes Operator&amp;nbsp; to learn how to install the ArangoDB Kubernetes operator and create your first deployment.
You can find information about troubleshooting, CustomResource references, and other details in the kube-arangodb documentation&amp;nbsp;.
Also check the production readiness state&amp;nbsp;.</description></item><item><title>Deploying ArangoDB in the cloud</title><link>http://localhost/3.11/deploy/in-the-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/in-the-cloud/</guid><description>Deploying ArangoDB on AWS ArangoDB can be deployed on AWS or other cloud platforms. AWS is the infrastructure provider choice for some of the largest ArangoDB installations.
Up to and including ArangoDB 3.2, official ArangoDB AMI were available in the AWS marketplace&amp;nbsp;. Such AMIs are not being maintained anymore, though. However, deploying on AWS is still possible, and again, a quite common scenario.
After having initialized your preferred AWS instance with one of the ArangoDB supported operating systems, using the ArangoDB Starter, performing a Manual Deployment, or using Kubernetes are all valid options to deploy on AWS.</description></item><item><title>Single instance vs. Cluster deployments</title><link>http://localhost/3.11/deploy/single-instance-vs-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/single-instance-vs-cluster/</guid><description>In general, a single server configuration and a cluster configuration of ArangoDB behave very similarly. However, there are differences due to the different nature of these setups. This can lead to a discrepancy in behavior between these two configurations. A summary of potential differences follows.
Migrating from a Single Instance to a Cluster To migrate from a Single Instance to a Cluster you will need to take a backup from the Single Instance and restore it into the Cluster with the tools arangodump and arangorestore.</description></item><item><title>ArangoDB Production Checklist</title><link>http://localhost/3.11/deploy/production-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/production-checklist/</guid><description>The following checklist can help to understand if important steps have been performed on your production system before you go live.
Operating System Executed the OS optimization scripts if you run ArangoDB on Linux. See Installing ArangoDB on Linux and its sub pages Linux Operating System Configuration and Linux OS Tuning Script Examples for details.
OS monitoring is in place (most common metrics, e.g. disk, CPU, RAM utilization).
Disk space monitoring is in place.</description></item><item><title>ArangoDB Architecture</title><link>http://localhost/3.11/deploy/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/deploy/architecture/</guid><description/></item></channel></rss>