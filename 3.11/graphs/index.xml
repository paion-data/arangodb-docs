<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphs on ArangoDB Documentation</title><link>http://localhost/3.11/graphs/</link><description>Recent content in Graphs on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.11/graphs/index.xml" rel="self" type="application/rss+xml"/><item><title>General Graphs</title><link>http://localhost/3.11/graphs/general-graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/graphs/general-graphs/</guid><description>This chapter describes the general-graph module. It allows you to define a graph that is spread across several edge and document collections. This allows you to structure your models in line with your domain and group them logically in collections giving you the power to query them in the same graph queries. There is no need to include the referenced collections within the query, this module will handle it for you.</description></item><item><title>SatelliteGraphs</title><link>http://localhost/3.11/graphs/satellitegraphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/graphs/satellitegraphs/</guid><description>ArangoDB Enterprise Edition ArangoGraph What is a SatelliteGraph? SatelliteGraphs are a specialized named graph type available for cluster deployments. Their underlying collections are synchronously replicated to all DB-Servers that are part of the cluster, which enables DB-Servers to execute graph traversals locally. This includes shortest path and k-shortest paths computations, and possibly even joins with traversals. They greatly improve the performance of such queries.
They are the natural extension of the SatelliteCollections concept to graphs.</description></item><item><title>SmartGraphs</title><link>http://localhost/3.11/graphs/smartgraphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/graphs/smartgraphs/</guid><description>ArangoDB Enterprise Edition ArangoGraph SmartGraphs are specifically targeted at graphs that need scalability and high performance. The way SmartGraphs use the ArangoDB cluster sharding makes it extremely useful for distributing data across multiple servers with minimal network latency.
Most graphs have one feature - a value that is stored in every vertex - that divides the entire graph into several smaller subgraphs. These subgraphs have a large amount of edges that only connect vertices in the same subgraph and only have few edges connecting vertices from other subgraphs.</description></item><item><title>EnterpriseGraphs</title><link>http://localhost/3.11/graphs/enterprisegraphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/graphs/enterprisegraphs/</guid><description>ArangoDB Enterprise Edition ArangoGraph This chapter describes the enterprise-graph module, a specialized version of SmartGraphs. It will give a vast performance benefit for all graphs sharded in an ArangoDB Cluster, reducing network hops substantially.
In terms of querying there is no difference between SmartGraphs and EnterpriseGraphs. For graph querying please refer to AQL Graph Operations and General Graph Functions sections.
Creating and modifying the underlying collections of an EnterpriseGraph are also similar to SmartGraphs.</description></item><item><title>Edges</title><link>http://localhost/3.11/graphs/working-with-edges/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/graphs/working-with-edges/</guid><description>Edges are used in graphs to link vertices together. They are documents with two additional system attributes that you set, a _from and a _to attribute. They need to be stored in edge collections.
Together with vertex documents stored in document collections (also called vertex collections in this context), edges form graphs.
Example
An edge collection stores the information that a company&amp;rsquo;s reception is a sub-unit to the services unit and the services unit is sub-unit to the CEO.</description></item><item><title>Example graphs</title><link>http://localhost/3.11/graphs/example-graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/graphs/example-graphs/</guid><description>ArangoDB comes with a set of easy-to-understand graphs for demonstration purposes.
In the web interface, navigate to the GRAPHS section, click the Add Graph card, go to the Examples tab, and click the Create button of one of the listed graphs.
In arangosh, run require(&amp;quot;@arangodb/graph-examples/example-graph&amp;quot;).loadGraph(&amp;quot;&amp;lt;name&amp;gt;&amp;quot;); with &amp;lt;name&amp;gt; substituted by the name of an example graph listed below.
You can visually explore the created graphs in the Graph viewer of the web interface.</description></item></channel></rss>