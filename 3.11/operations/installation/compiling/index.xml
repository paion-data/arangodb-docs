<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compiling ArangoDB from Source on ArangoDB Documentation</title><link>http://localhost/3.11/operations/installation/compiling/</link><description>Recent content in Compiling ArangoDB from Source on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.11/operations/installation/compiling/index.xml" rel="self" type="application/rss+xml"/><item><title>Compiling on Debian</title><link>http://localhost/3.11/operations/installation/compiling/compile-on-debian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/operations/installation/compiling/compile-on-debian/</guid><description>This guide describes how to compile and run the devel branch under a Debian based system. It was tested using a fresh Debian Testing machine on Amazon EC2. For completeness, the steps pertaining to AWS are also included here.
ArangoDB v3.7 requires at least g++ 9.2 as compiler. Older versions, especially g++ 7, do not work anymore. Launch the VM Optional
Login to your AWS account and launch an instance of Debian Testing.</description></item><item><title>Compiling ArangoDB under Windows</title><link>http://localhost/3.11/operations/installation/compiling/compile-on-windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/operations/installation/compiling/compile-on-windows/</guid><description>Install chocolatey With ArangoDB 3.0 a complete cmake environment was introduced. This also streamlines the dependencies on Windows. We suggest to use chocolatey.org&amp;nbsp; to install most of the dependencies. For sure most projects offer their own setup &amp;amp; install packages, chocolatey offers a simplified way to install them with less user interactions. You can even use chocolatey via ansibles 2.7 winrm facility&amp;nbsp; to do unattended installations of some software on Windows.</description></item><item><title>create data directory</title><link>http://localhost/3.11/operations/installation/compiling/running-custom-build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/operations/installation/compiling/running-custom-build/</guid><description>Once you built a custom version of ArangoDB (see Compiling), you may want to run it using existing data or possibly in isolation from an existing installation.
We assumes that you are in the root directory of the ArangoDB distribution and compiling has successfully finished.
Note that this guide is for Linux only.
Running in isolation This part shows how to run your custom build with an empty database directory</description></item><item><title>Jemalloc</title><link>http://localhost/3.11/operations/installation/compiling/recompiling-jemalloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/operations/installation/compiling/recompiling-jemalloc/</guid><description>This article is only relevant if you intend to compile ArangoDB on Ubuntu 16.10 or Debian testing On more modern linux systems (development/floating at the time of this writing) you may get compile / link errors with ArangoDB regarding jemalloc. This is due to compilers switching their default behavior regarding the PIC - Position Independent Code. It seems common that jemalloc remains in a stage where this change isn&amp;rsquo;t followed and causes ArangoDB to error out during the linking phase.</description></item></channel></rss>