<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on ArangoDB Documentation</title><link>http://localhost/3.11/develop/foxx-microservices/guides/</link><description>Recent content in Guides on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.11/develop/foxx-microservices/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Working with routers in Foxx services</title><link>http://localhost/3.11/develop/foxx-microservices/guides/working-with-routers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/working-with-routers/</guid><description>In Foxx routers are used to define the URLs of your API. The easiest way to use a router is to mount it directly in the service using the context:
const createRouter = require(&amp;#34;@arangodb/foxx/router&amp;#34;); const router = createRouter(); module.context.use(router); Nested routers Instead of mounting routers where they are defined, routers can also be exported from one module and imported in another. This allows you to structure your routes by splitting them across multiple files:</description></item><item><title>Working with collections in Foxx services</title><link>http://localhost/3.11/develop/foxx-microservices/guides/working-with-collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/working-with-collections/</guid><description>Foxx provides the module.context.collection method to provide easy access to ArangoDB collections. These collections are also called &amp;ldquo;prefixed collections&amp;rdquo; because Foxx will automatically prefix the name based on the mount path of the service.
The prefixes may initially feel unnecessarily verbose but help avoid conflicts between different services with similar collection names or even multiple copies of the same service sharing the same database. Keep in mind that you can also use collection objects when writing queries, so you don&amp;rsquo;t need to worry about writing out prefixes by hand.</description></item><item><title>Writing queries in Foxx services</title><link>http://localhost/3.11/develop/foxx-microservices/guides/writing-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/writing-queries/</guid><description>ArangoDB provides the query template string handler (or template tag&amp;nbsp;) to make it easy to write and execute AQL queries in your Foxx services:
const { query } = require(&amp;#34;@arangodb&amp;#34;); const max = 13; const oddNumbers = query` FOR i IN 1..${max} FILTER i % 2 == 1 RETURN i `.toArray(); console.log(oddNumbers); // 1,3,5,7,9,11,13 Any values passed via interpolation (i.e. using the ${expression} syntax) are passed to ArangoDB as AQL bind parameters, so you don&amp;rsquo;t have to worry about escaping them in order to protect against injection attacks in user-supplied data.</description></item><item><title>Development mode for Foxx services</title><link>http://localhost/3.11/develop/foxx-microservices/guides/development-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/development-mode/</guid><description>Development mode allows developers to make changes to deployed services in-place directly on the database server&amp;rsquo;s file system without downloading and re-uploading the service bundle. This can help during rapid development of service prototypes or diagnosing complex problems.
You can toggle development mode on and off using the Foxx CLI, the HTTP API or in the service settings tab of the web interface.
To find out where a service&amp;rsquo;s active source files are stored, check the service settings in the web interface or the service details when using the Foxx CLI or HTTP API.</description></item><item><title>Testing Foxx services</title><link>http://localhost/3.11/develop/foxx-microservices/guides/testing-foxx-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/testing-foxx-services/</guid><description>Foxx provides out of the box support for running tests against an installed service using an API similar to the Mocha test runner&amp;nbsp;.
Test files have full access to the service context and all ArangoDB APIs but cannot define Foxx routes.
Test files can be specified in the service manifest using either explicit paths of each individual file or patterns that can match multiple files (even if multiple patterns match the same file, it will only be executed once):</description></item><item><title>Foxx in a cluster setup</title><link>http://localhost/3.11/develop/foxx-microservices/guides/foxx-in-a-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/foxx-in-a-cluster/</guid><description>When running ArangoDB in a cluster the Foxx services will run on each Coordinator. Installing, upgrading and uninstalling services on any Coordinator will automatically distribute the changes to the service to the other Coordinators, making deployments as easy as in single-server mode.
The same considerations that apply to writing Foxx services for a standalone server also apply to writing services for a cluster:
You should avoid any kind of file system state beyond the deployed service bundle itself.</description></item><item><title>Scripts and scheduling in Foxx services</title><link>http://localhost/3.11/develop/foxx-microservices/guides/scripts-and-scheduling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/scripts-and-scheduling/</guid><description>In addition to the main entry point which defines your service&amp;rsquo;s routes and exports you can define scripts that need to be invoked directly and can be used to implement one-off tasks or scheduled and recurring jobs using queues.
These scripts can be declared in the scripts section of the service manifest:
&amp;#34;scripts&amp;#34;: { &amp;#34;setup&amp;#34;: &amp;#34;scripts/setup.js&amp;#34;, &amp;#34;send-mail&amp;#34;: &amp;#34;scripts/send-mail.js&amp;#34; } Invoking scripts Scripts can be invoked manually using the web interface, the Foxx CLI or the Foxx HTTP API.</description></item><item><title>Bundled Node modules for Foxx services</title><link>http://localhost/3.11/develop/foxx-microservices/guides/using-node-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/using-node-modules/</guid><description>You can use the node_modules folder to bundle Node.js modules with your Foxx service. Note that many third-party libraries written for Node.js or the browser rely on async or filesystem logic which may not be compatible with Foxx.
Bundled node modules are often referred to as dependencies. In ArangoDB this term can often be ambiguous because Foxx also provides a dependency mechanism for linking services together. Use a tool like yarn&amp;nbsp; or npm&amp;nbsp; to create a package.</description></item><item><title>Using Webpack with Foxx</title><link>http://localhost/3.11/develop/foxx-microservices/guides/using-webpack-with-foxx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/using-webpack-with-foxx/</guid><description>You can use Webpack&amp;nbsp; to compile your Foxx services the same way you would compile any other JavaScript code. However there are a few things you will need to keep in mind.
Basic configuration Because the ArangoDB JavaScript environment is largely compatible with Node.js, the starting point looks fairly similar:
&amp;#34;use strict&amp;#34;; module.exports = { mode: &amp;#34;production&amp;#34;, target: &amp;#34;node&amp;#34;, output: { libraryTarget: &amp;#34;commonjs2&amp;#34; }, externals: [/^@arangodb(\/|$)/] }; The service context Foxx extends the module object with a special context property that reflects the current service context.</description></item><item><title>Authentication in Foxx services</title><link>http://localhost/3.11/develop/foxx-microservices/guides/authentication-and-sessions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/authentication-and-sessions/</guid><description>Foxx provides the auth module to implement basic password verification and hashing but is not very secure unless using the (very slow) PBKDF2 algorithm. Alternatively you can use the OAuth 1.0a or OAuth 2.0 modules to offload identity management to a trusted provider (e.g. Facebook, GitHub, Google or Twitter).
The session middleware provides a mechanism for adding session logic to your service, using e.g. a collection or JSON Web Tokens to store the sessions between requests.</description></item><item><title>Linking Foxx services together</title><link>http://localhost/3.11/develop/foxx-microservices/guides/linking-services-together/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/linking-services-together/</guid><description>When using multiple services (or multiple copies of the same service) in the same database, sometimes you may want to share collections or methods between those services. Typical examples are:
collections or APIs for managing shared data (e.g. application users or session data) common middleware that requires some configuration that would be identical for multiple services reusable routers that provide the same API for different services For scenarios like these, Foxx provides a way to link services together and allow them to export JS APIs other services can use.</description></item><item><title>File access in Foxx</title><link>http://localhost/3.11/develop/foxx-microservices/guides/working-with-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/working-with-files/</guid><description>Files within the service folder should always be considered read-only. You should not expect to be able to write to your service folder or modify any existing files.
ArangoDB is primarily a database. In most cases the best place to store data is therefore inside the database, not on the file system.
Serving files The most flexible way to serve files in your Foxx service is to simply pass them through in your router using the context object&amp;rsquo;s fileName method and the response object&amp;rsquo;s sendFile method:</description></item><item><title>Making requests in Foxx</title><link>http://localhost/3.11/develop/foxx-microservices/guides/making-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/making-requests/</guid><description>ArangoDB is primarily a database, so Foxx doesn&amp;rsquo;t offer the same level of network access as more general-purpose JavaScript environments like Node.js. However ArangoDB does provide the @arangodb/request module for making HTTP (or HTTPS) requests:
&amp;#34;use strict&amp;#34;; const request = require(&amp;#34;@arangodb/request&amp;#34;); const response = request.get( &amp;#34;https://pokeapi.co/api/v2/pokemon/25/&amp;#34; ); if (response.status &amp;lt; 400) { const pikachu = response.json; console.log(pikachu); } Because Foxx services are always synchronous and network requests can be considerably slower than any other database operation, you should avoid making requests in your service if possible or use queues instead.</description></item><item><title>Exposing Foxx to the browser</title><link>http://localhost/3.11/develop/foxx-microservices/guides/access-from-the-browser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/guides/access-from-the-browser/</guid><description>There are three ways to use Foxx in a web application:
Accessing Foxx from an application server that exposes its own API.
Using a web server like Apache or nginx as a reverse proxy to expose only the Foxx service.
Exposing ArangoDB directly by running ArangoDB on a public port.
Using an application server Accessing Foxx from an application server is probably the safest approach as the application server shields the database from the browser entirely.</description></item></channel></rss>