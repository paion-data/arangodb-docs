<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Foxx Routers on ArangoDB Documentation</title><link>http://localhost/3.11/develop/foxx-microservices/reference/routers/</link><description>Recent content in Foxx Routers on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.11/develop/foxx-microservices/reference/routers/index.xml" rel="self" type="application/rss+xml"/><item><title>Foxx Endpoints</title><link>http://localhost/3.11/develop/foxx-microservices/reference/routers/endpoints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/reference/routers/endpoints/</guid><description>Endpoints are returned by the use, all and HTTP verb (e.g. get, post) methods of routers as well as the use method of the service context. They can be used to attach metadata to mounted routes, middleware and child routers that affects how requests and responses are processed or provides API documentation.
Endpoints should only be used to invoke the following methods. Endpoint methods can be chained together (each method returns the endpoint itself).</description></item><item><title>Foxx Middleware</title><link>http://localhost/3.11/develop/foxx-microservices/reference/routers/middleware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/reference/routers/middleware/</guid><description>Middleware in Foxx refers to functions that can be mounted like routes and can manipulate the request and response objects before and after the route itself is invoked. They can also be used to control access or to provide common logic like logging etc. Unlike routes, middleware is mounted with the use method like a router.
Instead of a function the use method can also accept an object with a register function that will take a parameter endpoint, the middleware will be mounted at and returns the actual middleware function.</description></item><item><title>Foxx request objects</title><link>http://localhost/3.11/develop/foxx-microservices/reference/routers/request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/reference/routers/request/</guid><description>The request object specifies the following properties:
arangoUser: string | null
The authenticated ArangoDB username used to make the request. This value is only set if authentication is enabled in ArangoDB and the request set an authorization header ArangoDB was able to verify. You are strongly encouraged to implement your own authentication logic for your own services but this property can be useful if you need to integrate with ArangoDB&amp;rsquo;s own authentication mechanisms.</description></item><item><title>Foxx response objects</title><link>http://localhost/3.11/develop/foxx-microservices/reference/routers/response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/develop/foxx-microservices/reference/routers/response/</guid><description>The response object specifies the following properties:
body: Buffer | string
Response body as a string or buffer. Can be set directly or using some of the response methods.
context: Context
The service context in which the router is mounted (rather than the context in which the route is defined).
headers: object
The raw headers object.
statusCode: number
Status code of the response. Defaults to 200 (body set and not an empty string or buffer) or 204 (otherwise) if not changed from undefined.</description></item></channel></rss>