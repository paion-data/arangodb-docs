<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About indexing and indexes on ArangoDB Documentation</title><link>http://localhost/3.11/index-and-search/indexing/</link><description>Recent content in About indexing and indexes on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.11/index-and-search/indexing/index.xml" rel="self" type="application/rss+xml"/><item><title>Index basics</title><link>http://localhost/3.11/index-and-search/indexing/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/index-and-search/indexing/basics/</guid><description>ArangoDB automatically indexes some system attributes but you are free to create additional indexes on other attributes of documents. You generally need to strike a balance between creating indexes for often-used attributes to improve the performance of read queries and the cost that indexes incur during writes to maintain them.
User-defined indexes can be created on collection level. Most user-defined indexes can be created by specifying the names of the index attributes.</description></item><item><title>Which Index to use when</title><link>http://localhost/3.11/index-and-search/indexing/which-index-to-use-when/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/index-and-search/indexing/which-index-to-use-when/</guid><description>ArangoDB automatically indexes the _key attribute in each collection. There is no need to index this attribute separately. Please note that a document&amp;rsquo;s _id attribute is derived from the _key attribute, and is thus implicitly indexed, too.
ArangoDB also automatically creates an index on _from and _to in any edge collection, meaning incoming and outgoing connections can be determined efficiently.
Index types Users can define additional indexes on one or multiple document attributes.</description></item><item><title>Index Utilization</title><link>http://localhost/3.11/index-and-search/indexing/index-utilization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/index-and-search/indexing/index-utilization/</guid><description>In most cases ArangoDB will use a single index per collection in a given query. AQL queries can use more than one index per collection when multiple FILTER conditions are combined with a logical OR and these can be covered by indexes. AQL queries will use a single index per collection when FILTER conditions are combined with logical AND.
Creating multiple indexes on different attributes of the same collection may give the query optimizer more choices when picking an index.</description></item><item><title>Working with Indexes</title><link>http://localhost/3.11/index-and-search/indexing/working-with-indexes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/index-and-search/indexing/working-with-indexes/</guid><description>Index Identifiers An index identifier uniquely identifies an index within a collection. It is a numeric value stored as a string that is auto-generated by ArangoDB. It can be prefixed with a collection name and forward slash (/) to uniquely identify an index within a database.
A specific index of a collection can be accessed using its index identifier as follows:
db.collection.index(&amp;#34;&amp;lt;index-identifier&amp;gt;&amp;#34;); db.collection.index(&amp;#34;&amp;lt;collection-name&amp;gt;/&amp;lt;index-identifier&amp;gt;&amp;#34;); db._index(&amp;#34;&amp;lt;collection-name&amp;gt;/&amp;lt;index-identifier&amp;gt;&amp;#34;); For example, assume that the full index identifier, which is stored in the _id attribute of the index, is demo/362549736, and the index has been created in a collection named demo.</description></item></channel></rss>